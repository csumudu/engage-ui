.pickerResultShow{display:block;}
.pickerResultHide{display:none;}

// Card Component
.avatarImage {
  border-radius: 50%;
  width: 40px;
  height: 40px;
}
.cardBorder {
  width: 400px;
  background-color: white;
  margin: 0;
  padding: 0;
  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}
.check {
  width: 100px;
}
.cardElem {
  align-items: center;
  margin: 5px 5px 5px 5px;
  white-space: pre;
}
.cardItem {
  z-index: 2;
}

.suggestionsList {
  position: absolute;
  list-style-type: none;
  background-color: white; 
  padding: 0;
  margin: 0 0 0 10px;
  z-index: 1000;
}

.suggestionsContainer {
  z-index: 2;
}

.autosuggestInput {
  border: none;
  background-color: transparent;
  display: inline-block;
  font-size: 1.3rem;
  color: #212121;
  overflow: hidden;
  text-overflow: ellipsis;
  width: 200px;
  padding-left: 7px;
}



.autosuggestInput:focus {
  outline: none;
}

.bold {
  font-weight: bold;
  white-space: pre;
}

.inputOutline {
  border-radius: 5px;
  cursor: text;
  min-width: 100px;
  min-height: 25px;
}

.inputOutlineInit {
  width: 100%;
  border-radius: 5px;
  cursor: text;
  min-height: 25px;
}

.flex {
  display: flex;
}
.nameStyle {
  width: 100px;
}
.emailStyle {
  width: 240px; 
  color: rgba(0, 0, 0, 0.54);
}
.grey {
  background-color: #eeeeee;
}


// PickerTextField Component

$backdrop-horizontal-spacing: spacing(tight) * 1.5;
$addon-horizontal-spacing: 0.25em;
$input-horizontal-padding: spacing(tight) * 1.5;
$icon-size: rem(20px);

$stacking-order: (
  contents: 20,
  backdrop: 10,
  icon: 30
);

// TODO: revisit
.customPlaceholder {
  position: absolute;
  font-size: 13px;
  font-weight: normal;
  font-style: normal;
  font-stretch: normal;
  line-height: 1.23;
  letter-spacing: normal;
  color: #616161;
}

.pickerTextField {
  @include text-style-input;
  position: relative;
  display: flex;
  align-items: baseline;
  padding: 0 $backdrop-horizontal-spacing;
  color: color(ink, lightest);
  align-items: center;
}

.multiline {
  padding: 0;

  > .input {
    overflow: auto;
    padding-left: $backdrop-horizontal-spacing;
    padding-right: $backdrop-horizontal-spacing;
  }
}

.multiline:not(.resizable) {
  > .input {
      resize: none;
  }
}

.hasValue {
  .input {
    color: color(ink);
  }
}

.error {
  
  .input::placeholder {
    // This is the only place this color is used.
    // stylelint-disable-next-line color-no-hex
    color: #9c9798;
  }

  > .input ~ .backdrop {
    background-color: color(red, lighter);
    border-color: color(red);
    box-shadow: none;
  }

  // We need this to override the box-shadow in the focus state.
  // stylelint-disable-next-line selector-max-specificity
  > .input:focus ~ .backdrop {
    border-color: color(indigo);
    box-shadow:
      inset shadow(transparent),
      0 0 0 1px color(indigo);
  }
}

.readOnly > .backdrop {
  background-color: color(sky, lighter);
}

.disabled > .backdrop {
  background-color: color(sky, lighter);
  border: border();
  box-shadow: none;
}

.input {
  @include text-style-input;
  position: relative;
  z-index: z-index(contents, $stacking-order);
  display: block;
  flex: 1 1 0%;
  width: 100%;
  min-height: control-height();
  margin: 0;
  padding: control-vertical-padding() 0;
  background: none;
  border: border(transparent);
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
  appearance: none;

  &:disabled {
    color: color(ink, lightest);
  }

  &:focus {
    outline: none;

    ~ .backdrop {
      border-color: color(indigo);
      box-shadow:
        inset shadow(transparent),
        0 0 0 1px color(indigo);
    
    }
  }

  &::placeholder {
    color: color(ink, lightest);
    text-align: left !important;
  }
}

.backdrop {
  position: absolute;
  z-index: z-index(backdrop, $stacking-order);
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background: color(white);
  border: border(dark);
  box-shadow: inset 0 1px 0 0 rgba(color(ink, lighter), 0.05);
  border-radius: border-radius();
  will-change: box-shadow;
  transition: box-shadow duration() easing();
}

.backdropHidden {

  & > .backdrop {
    background-color: transparent;
    border-color: transparent;
    box-shadow: none;
  }

  &.error > .input ~ .backdrop {
    background-color: transparent;
    border-color: transparent;
    box-shadow: none;
  }

  &.disabled > .backdrop {
    background-color: transparent;
    border-color: transparent;
  }

  .input:focus ~ .backdrop {
    border-color: transparent;
    box-shadow: none;
  }

}

.multiLineLabel {
  position: absolute;
  background: #FFF;
  z-index: 100;
  left: 0;
  right: 28px;
  top: -2px;
  padding-top: 2px;
}

.resizer {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  visibility: hidden;
}

.dummyinput {
  @include text-style-input;
  padding: control-vertical-padding() $backdrop-horizontal-spacing;
  border: border(transparent);

  // We need the following properties in order to have long, unbroken
  // strings wrap in the same way they do in textareas.
  white-space: pre-wrap;
  word-wrap: break-word;
}

.segment {
  display: flex;
  flex: 1 1 0%;
  justify-content: center;
  align-items: center;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background: linear-gradient(to bottom, color(white), color(sky, lighter));
  border: none;
  border-left: border(dark);
  will-change: background, box-shadow;
  transition:
    background duration(fast) easing(),
    box-shadow duration(fast) easing();

  &:focus {
    outline: none;
  }

  &:active {
    background: linear-gradient(to bottom, color(sky, light), color(sky, light));
    box-shadow:
      inset 0 1px 1px 0 rgba(color(ink, lighter), 0.1),
      inset 0 1px 4px 0 rgba(color(ink, lighter), 0.2);
  }

  &:not(:first-child) {
    margin-top: -1px;
    border-top: border(dark);
  }

  &:first-child {
    border-top-right-radius: border-radius();
  }

  &:last-child {
    border-bottom-right-radius: border-radius();
  }
}

.container, .containerInit {
  display: inline-block;
  // overflow: hidden;
  text-overflow: ellipsis;
}

.containerInit {
  width:100%;
}

.icon {
  @include recolor-icon(color(ink, lightest));
  position: absolute;
  z-index: z-index(icon, $stacking-order);
  top: 50%;
  right: $input-horizontal-padding;
  transform: translateY(-50%);
  pointer-events: none;
  // width: 20px;
  // height: 20px;
}


// AutoSuggest Component

.backdropAutosuggest {
  z-index: 1;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background: color(white);
  border: border(dark);
  box-shadow: inset 0 1px 0 0 rgba(color(ink, lighter), 0.05);
  border-radius: border-radius();
  will-change: box-shadow;
  transition: box-shadow duration() easing();
}